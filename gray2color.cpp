#include "gray2color.h"
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <QImage>
#include <QDebug>
using namespace cv;
struct RGBQUAD    //结构体类型的说明与定义分开。 声明
{
    int rgbRed;   /*红*/
    int rgbGreen;  /*绿*/
    int rgbBlue;     /*蓝*/
};
Gray2Color::Gray2Color()
{

}
void Gray2Color::Pseudo_Color(const cv::Mat &gray_image,cv::Mat &result_image,cv::Mat &color_map){
    result_image.create(gray_image.size(),CV_8UC3);
    //opencv默认的颜色排列顺序是BGR，而这里自定义的colormap的顺序是RGB
    //cv::cvtColor(color_map, color_map, cv::COLOR_BGR2RGB);
    //cv::LUT(gray_image,color_map, result_image );
    //cv::applyColorMap(gray_image, result_image, cv::COLORMAP_JET);
   // qDebug()<<gray_image.channels();
    for( int row =0; row <gray_image.rows; row++)
    {
        for( int col = 0; col<gray_image.cols; col++)
        {
            int index=255-(int)gray_image.at<uchar>(row, col);
            result_image.at<Vec3b>(row, col)[0]=color_map.at<Vec3b>(index,0)[0];
            result_image.at<Vec3b>(row, col)[1]=color_map.at<Vec3b>(index,0)[1];
            result_image.at<Vec3b>(row, col)[2]=color_map.at<Vec3b>(index,0)[2];            
        }
    }
    //imshow("color_image_rgb",color_map);

}
void Gray2Color::Create_map(int Level,cv::Mat &result_image){
    ///测试用
   /* //对应HSV空间240-->0
    result_image.create(360,360,CV_8UC3);
    for (int i = 0; i < 360; i++) {//一共有256种对应关系
        int j=360;
        while(--j)
            result_image.at<cv::Vec3b>(i,j)=cv::Vec3b(i,120,240);
    }
    cv::cvtColor(result_image,result_image,CV_HSV2BGR);
    imshow("heheh",result_image);
    int value=1;
    cv::Mat result_image2;
     result_image2.create(160,160,CV_8UC3);
    for (int i = 0; i < 160/value; i++){
        for(int j = 0; j < value; j++){
            int k=160;
            while(--k)
                result_image2.at<cv::Vec3b>(i*value+j,k)=cv::Vec3b((i*value+j)/value*value,120,240);
        }
    }
    cv::cvtColor(result_image2,result_image2,CV_HLS2RGB);
    imshow("hehehsss",result_image2);
    int test[256][3]={
        {0, 0, 0},    {4, 4, 4},    {8, 0, 8},    {16, 0, 16},    {20, 0, 20},
        {24, 0, 24},    {33, 0, 33},    {37, 0, 37},    {41, 0, 41},    {44, 0, 44},
        {49, 0, 49},    {53, 0, 53},    {57, 0, 57},    {60, 0, 60},    {66, 0, 66},
        {70, 0, 70},    {74, 0, 74},    {82, 0, 82},    {90, 0, 90},    {99, 0, 99},
        {107, 0, 107},    {115, 0, 115},    {123, 0, 123},    {132, 0, 132},    {140, 0, 140},
        {148, 0, 148},    {156, 0, 156},    {165, 0, 165},    {173, 0, 173},    {181, 0, 181},
        {189, 0, 189},    {198, 0, 198},    {206, 0, 206},    {214, 0, 214},    {222, 0, 222},
        {231, 0, 231},    {239, 0, 239},    {247, 0, 247},    {255, 0, 255},    {255, 0, 255},
        {247, 0, 255},    {239, 0, 255},    {231, 0, 255},    {222, 0, 255},    {214, 0, 255},
        {206, 0, 255},    {198, 0, 255},    {189, 0, 255},    {181, 0, 255},    {173, 0, 255},
        {165, 0, 255},    {156, 0, 255},    {148, 0, 255},    {140, 0, 255},    {132, 0, 255},
        {123, 0, 255},    {115, 0, 255},    {107, 0, 255},    {99, 0, 255},    {90, 0, 255},
        {82, 0, 255},    {74, 0, 255},    {66, 0, 255},    {57, 0, 255},    {49, 0, 255},
        {41, 0, 255},    {33, 0, 255},    {24, 0, 255},    {16, 0, 255},    {8, 0, 255},
        {0, 0, 255},    {0, 0, 255},    {0, 8, 255},    {0, 16, 255},    {0, 24, 255},
        {0, 33, 255},    {0, 41, 255},    {0, 49, 255},    {0, 57, 255},    {0, 66, 255},
        {0, 74, 255},    {0, 82, 255},    {0, 90, 255},    {0, 99, 255},    {0, 107, 255},
        {0, 115, 255},    {0, 123, 255},    {0, 132, 255},    {0, 140, 255},    {0, 148, 255},
        {0, 156, 255},    {0, 165, 255},    {0, 169, 255},    {0, 173, 255},    {0, 181, 255},
        {0, 189, 255},    {0, 198, 255},    {0, 206, 255},    {0, 214, 255},    {0, 222, 255},
        {0, 231, 255},    {0, 239, 255},    {0, 247, 255},    {0, 255, 255},    {0, 255, 247},
        {0, 255, 255},    {0, 247, 231},    {0, 247, 239},    {0, 239, 214},    {0, 239, 222},
        {0, 231, 198},    {0, 231, 206},    {0, 222, 181},    {0, 222, 189},    {0, 214, 165},
        {0, 214, 173},    {0, 206, 148},    {0, 206, 156},    {0, 198, 123},    {0, 198, 132},
        {0, 198, 140},    {0, 189, 115},    {0, 189, 123},    {0, 181, 99},    {0, 181, 107},
        {0, 177, 94},    {0, 173, 82},    {0, 173, 90},    {0, 165, 66},    {0, 165, 74},
        {0, 156, 41},    {0, 156, 49},    {0, 156, 57},    {0, 148, 24},    {0, 148, 33},
        {0, 148, 41},    {0, 140, 16},    {0, 140, 24},    {0, 136, 10},    {0, 132, 0},
        {0, 132, 8},    {0, 132, 0},    {8, 132, 0},    {8, 136, 0},    {8, 140, 0},
        {16, 140, 0},    {24, 140, 0},    {24, 148, 0},    {33, 148, 0},    {37, 148, 0},
        {41, 148, 0},    {41, 156, 0},    {45, 156, 0},    {49, 156, 0},    {57, 156, 0},
        {57, 165, 0},    {66, 165, 0},    {74, 165, 0},    {74, 173, 0},    {82, 173, 0},
        {90, 173, 0},    {94, 177, 0},    {99, 181, 0},    {107, 181, 0},    {115, 189, 0},
        {123, 189, 0},    {132, 198, 0},    {140, 198, 0},    {144, 202, 0},    {148, 206, 0},
        {156, 206, 0},    {165, 214, 0},    {169, 214, 0},    {173, 214, 0},    {181, 222, 0},
        {189, 222, 0},    {198, 231, 0},    {202, 231, 0},    {206, 231, 0},    {214, 239, 0},
        {222, 239, 0},    {231, 247, 0},    {239, 247, 0},    {247, 255, 0},    {255, 255, 0},
        {255, 255, 0},    {255, 247, 0},    {255, 239, 0},    {255, 231, 0},    {255, 222, 0},
        {255, 214, 0},    {255, 206, 0},    {255, 198, 0},    {255, 189, 0},    {255, 181, 0},
        {255, 177, 0},    {255, 173, 0},    {255, 165, 0},    {255, 156, 0},    {255, 148, 0},
        {255, 144, 0},    {255, 140, 0},    {255, 132, 0},    {255, 123, 0},    {255, 115, 0},
        {255, 107, 0},    {255, 99, 0},    {255, 94, 0},    {255, 90, 0},    {255, 82, 0},
        {255, 74, 0},    {255, 66, 0},    {255, 57, 0},    {255, 49, 0},    {255, 41, 0},
        {255, 33, 0},    {255, 24, 0},    {255, 16, 0},    {255, 8, 0},    {255, 0, 0},
        {255, 0, 0},    {255, 8, 8},    {255, 16, 16},    {255, 24, 24},    {255, 33, 33},
        {255, 41, 41},    {255, 49, 49},    {255, 57, 57},    {255, 66, 66},    {255, 74, 74},
        {255, 82, 82},    {255, 90, 90},    {255, 99, 99},    {255, 107, 107},    {255, 115, 115},
        {255, 123, 123},    {255, 132, 132},    {255, 140, 140},    {255, 144, 144},    {255, 148, 148},
        {255, 152, 152},    {255, 156, 156},    {255, 165, 165},    {255, 173, 173},    {255, 181, 181},
        {255, 185, 185},    {255, 189, 189},    {255, 198, 198},    {255, 206, 206},    {255, 214, 214},
        {255, 222, 222},    {255, 231, 231},    {255, 239, 239},    {255, 247, 247},    {255, 255, 255},
        {255, 255, 255}
    };
    cv::Mat result_image3;
    result_image3.create(256,256,CV_8UC3);
    for (int i = 0; i < 256; i++){
        int k=256;
        while(--k)
            result_image3.at<cv::Vec3b>(i,k)=cv::Vec3b(test[i][0],test[i][1],test[i][2]);
    }
    //cv::cvtColor(result_image3,result_image3,CV_HLS2RGB);
    imshow("hehehdfds",result_image3);
    cv::Mat result_image4;
    result_image4.create(256,256,CV_8UC3);
    for (int i = 0; i < 256; i++){
        int k=256;
        while(--k)
            result_image4.at<cv::Vec3b>(i,k)=cv::Vec3b(i,i,i);
    }
     cv::applyColorMap(result_image4, result_image4, cv::COLORMAP_JET);
     imshow("color_image_sdsdsd",result_image4);*/
    //int k=20;
    result_image.create(256,20,CV_8UC3);
    int scale=256/Level;
    for (int i = 0; i <= 255; i++){
        if(i%scale){//同色
            int k=19;
            while(k--)
                result_image.at<cv::Vec3b>(i,k)=result_image.at<cv::Vec3b>(i-1,k);
        }else{
            int k=19;
            while(k--)
                result_image.at<cv::Vec3b>(i,k)=cv::Vec3b(255-i,255-i,255-i);
        }

    }
    cv::applyColorMap(result_image, result_image, cv::COLORMAP_JET);
}
